#include <stdio.h>
#include <string.h> //strlen
#include <sys/socket.h>
#include <arpa/inet.h> //inet_addr
#include <unistd.h>    //write

void ReadXBytes(int socket, unsigned int x, void *buffer)
{
    int bytesRead = 0;
    int result;
    while (bytesRead < x)
    {
        result = read(socket, buffer + bytesRead, x - bytesRead);
        if (result < 1)
        {
            // Throw your error.
        }

        bytesRead += result;
    }
}

int main(int argc, char *argv[])
{
    int socket_desc, new_socket, c;
    struct sockaddr_in server, client;
    char *message;
    char *server_reply;

    //Create socket
    socket_desc = socket(AF_INET, SOCK_STREAM, 0);
    if (socket_desc == -1)
    {
        printf("Could not create socket");
    }

    //Prepare the sockaddr_in structure
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(8888);

    //Bind
    if (bind(socket_desc, (struct sockaddr *)&server, sizeof(server)) < 0)
    {
        puts("bind failed");
        return 1;
    }
    puts("bind done");

    //Listen
    listen(socket_desc, 3);

    //Accept and incoming connection
    puts("Waiting for incoming connections...");
    c = sizeof(struct sockaddr_in);
    while ((new_socket = accept(socket_desc, (struct sockaddr *)&client, (socklen_t *)&c)))
    {
        puts("Connection accepted");
        unsigned int length = 0;
        char *buffer = 0;
        // we assume that sizeof(length) will return 4 here.
        ReadXBytes(socket_desc, sizeof(length), (void *)(&length));
        buffer = new char[length];
        ReadXBytes(socket_desc, length, (void *)buffer);

        // Then process the data as needed.

        delete[] buffer;
        puts(server_reply);
        if (server_reply == "one")
        {
            message = "Option 1 Selected\n";
            write(new_socket, message, strlen(message));
        }
        else
        {
            message = "Error!\n";
            write(new_socket, message, strlen(message));
        }
        //Reply to the client
    }
    if (new_socket < 0)
    {
        perror("accept failed");
        return 1;
    }

    return 0;
}